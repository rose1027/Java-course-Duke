#BlueJ class context
comment0.target=ImageResource
comment0.text=\r\n\ The\ <code>ImageResource</code>\ class\ represents\ an\ image\ as\ a\ grid\ of\ <code>Pixel</code>\ objects\r\n\ and\ allows\ access\ to\ all\ of\ them,\ using\ the\ method\ <code>pixels</code>.\ These\ pixels\ can\ then\ be\r\n\ iterated\ over\ using\ a\ <code>for</code>\ loop.\r\n\ \r\n\ <P>\r\n\ Note,\ no\ changes\ made\ to\ the\ pixels\ in\ this\ image\ affect\ the\ original\ image\ opened\ unless\ you\ use\r\n\ the\ method\ <code>save</code>.\r\n\ \r\n\ <P>\r\n\ Example\ usage\:\r\n\ \r\n\ <pre>\r\n\ ImageResource\ image\ \=\ new\ ImageResource();\r\n\ for\ (Pixel\ p\ \:\ image.pixels())\ {\r\n\ \ \ \ \ int\ red\ \=\ p.getRed();\r\n\ \ \ \ \ int\ green\ \=\ p.getGreen();\r\n\ \ \ \ \ int\ blue\ \=\ p.getBlue();\r\n\ \ \ \ \ int\ average\ \=\ (red\ +\ green\ +\ blue)\ /\ 3;\r\n\ \ \ \ \ p.setRed(average);\r\n\ \ \ \ \ p.setGreen(average);\r\n\ \ \ \ \ p.setBlue(average);\r\n\ }\r\n\ image.draw();\r\n\ </pre>\r\n\ \r\n\ <p>\r\n\ This\ is\ open-source\ software\ released\ under\ the\ terms\ of\ the\ GPL\r\n\ (http\://www.gnu.org/licenses/gpl.html).\r\n
comment1.params=
comment1.target=ImageResource()
comment1.text=\r\n\ Create\ an\ <code>ImageResource</code>\ object\ that\ represents\ the\ file\ chosen\ by\ the\ user\ using\r\n\ a\ file\ selection\ dialog\ box.\r\n\ \r\n\ @throws\ exception\ if\ no\ file\ is\ selected\ by\ the\ user\r\n
comment10.params=
comment10.target=java.lang.String\ getFileName()
comment10.text=\r\n\ Returns\ the\ file\ name\ associated\ with\ this\ image.\r\n\r\n\ @return\ the\ name\ of\ the\ file\ used\ to\ create\ this\ image\ or\ an\ empty\ string\ if\ it\ was\ created\r\n\ \ \ \ \ \ \ \ \ as\ a\ sized\ image\r\n
comment11.params=name
comment11.target=void\ setFileName(java.lang.String)
comment11.text=\r\n\ Resets\ the\ file\ name\ associated\ with\ this\ image.\r\n\ \r\n\ Useful,\ for\ example,\ when\ saving\ the\ results\ of\ changes\ to\ this\ image\ in\ a\ different\ file\r\n\ than\ the\ original.\r\n\ \r\n\ @param\ name\ the\ new\ name\ for\ the\ file\r\n
comment12.params=x\ y
comment12.target=Pixel\ getPixel(int,\ int)
comment12.text=\r\n\ Returns\ the\ pixel\ at\ the\ (x,\ y)\ coordinates\ passed\ as\ a\ parameter.\r\n\ \r\n\ @param\ x\ the\ column\ position\ of\ the\ pixel\r\n\ @param\ y\ the\ row\ position\ of\ the\ pixel\r\n\ @return\ the\ Pixel\ at\ the\ given\ (x,\ y)\ coordinates\r\n
comment13.params=x\ y\ p
comment13.target=void\ setPixel(int,\ int,\ Pixel)
comment13.text=\r\n\ Resets\ the\ pixel\ at\ the\ given\ (x,\ y)\ coordinates\ but\ does\ not\ redraw\ it.\r\n\ \r\n\ @param\ x\ the\ column\ position\ of\ the\ pixel\r\n\ @param\ y\ the\ row\ position\ of\ the\ pixel\r\n\ @param\ p\ the\ new\ pixel\ values\ to\ use\r\n
comment14.params=
comment14.target=java.lang.String\ toString()
comment14.text=\r\n\ Returns\ a\ string\ representation\ of\ the\ image\ (file\ name,\ width,\ and\ height).\r\n\ \r\n\ @return\ a\ string\ representation\ of\ the\ image\r\n
comment15.params=
comment15.target=void\ save()
comment15.text=\r\n\ Saves\ the\ image\ as\ a\ JPEG\ using\ its\ current\ file\ name\ or\ opens\ a\ file\ selection\ dialog\ box\ to\r\n\ allow\ the\ user\ to\ choose\ a\ name\ if\ no\ file\ name\ set\ (for\ example\ if\ this\ image\ was\ created\ as\r\n\ a\ blank\ sized\ image).\r\n\ \r\n\ @throws\ exception\ if\ the\ current\ filename\ cannot\ be\ accessed\ for\ saving\r\n
comment16.params=
comment16.target=void\ saveAs()
comment16.text=\r\n\ Saves\ the\ image\ as\ a\ JPEG\ by\ opening\ a\ file\ selection\ dialog\ box\ to\ allow\ the\ user\ to\ choose\r\n\ the\ new\ name\ for\ the\ file.\r\n\ \r\n\ @throws\ exception\ if\ no\ file\ is\ selected\ by\ the\ user\r\n
comment17.params=image
comment17.target=Pixel[]\ imageToPixels(java.awt.Image)
comment18.params=pixels\ width\ height
comment18.target=Pixel[]\ intsToPixels(int[],\ int,\ int)
comment19.params=pixels
comment19.target=int[]\ pixelsToInts(Pixel[])
comment2.params=width\ height
comment2.target=ImageResource(int,\ int)
comment2.text=\r\n\ Create\ an\ <code>ImageResource</code>\ object\ whose\ size\ is\ the\ width\ and\ height\ passed\ as\r\n\ parameters\ and\ whose\ pixels\ are\ all\ black.\r\n\ \r\n\ @param\ width\ the\ width\ of\ the\ image\ in\ pixels\r\n\ @param\ height\ the\ height\ of\ the\ image\ in\ pixels\r\n\ @throws\ exception\ if\ the\ width\ or\ height\ are\ not\ positive\ values\r\n
comment20.params=
comment20.target=void\ updateImage()
comment21.params=width\ height
comment21.target=java.awt.image.BufferedImage\ getBlankImage(int,\ int)
comment22.params=fileName
comment22.target=java.awt.image.BufferedImage\ getImageFromFile(java.lang.String)
comment23.params=fileName
comment23.target=void\ setPath(java.lang.String)
comment24.params=f
comment24.target=void\ init(java.io.File)
comment25.params=fileName\ image
comment25.target=void\ init(java.lang.String,\ java.awt.image.BufferedImage)
comment3.params=fileName
comment3.target=ImageResource(java.lang.String)
comment3.text=\r\n\ Create\ an\ <code>ImageResource</code>\ object\ from\ the\ file\ name\ passed\ as\ a\ parameter.\r\n\ \r\n\ @param\ fileName\ the\ name\ of\ the\ file\r\n\ @throws\ exception\ if\ the\ file\ cannot\ be\ accessed\ or\ is\ not\ in\ an\ image\ format\r\n
comment4.params=file
comment4.target=ImageResource(java.io.File)
comment4.text=\r\n\ Create\ an\ <code>ImageResource</code>\ object\ from\ a\ file\ given\ as\ a\ parameter.\r\n\ \r\n\ @param\ file\ the\ file\ representing\ an\ image\r\n\ @throws\ exception\ if\ the\ file\ cannot\ be\ accessed\ or\ is\ not\ in\ an\ image\ format\r\n
comment5.params=other
comment5.target=ImageResource(ImageResource)
comment5.text=\r\n\ Create\ an\ <code>ImageResource</code>\ object\ that\ is\ a\ copy\ of\ another\ image.\r\n\ \r\n\ @param\ other\ the\ original\ image\ being\ copied\r\n
comment6.params=
comment6.target=int\ getWidth()
comment6.text=\r\n\ Returns\ the\ width\ of\ the\ image\ in\ pixels.\r\n\ \r\n\ @return\ the\ image's\ width\ in\ pixels\r\n
comment7.params=
comment7.target=int\ getHeight()
comment7.text=\r\n\ Returns\ the\ height\ of\ the\ image\ in\ pixels.\r\n\ \r\n\ @return\ the\ image's\ height\ in\ pixels\r\n
comment8.params=
comment8.target=java.lang.Iterable\ pixels()
comment8.text=\r\n\ Allow\ access\ to\ this\ image\ one\ pixel\ at\ a\ time.\r\n\ \r\n\ @return\ an\ <code>Iterable</code>\ that\ will\ allow\ access\ to\ each\ pixel\ in\ this\ image\r\n
comment9.params=
comment9.target=void\ draw()
comment9.text=\r\n\ Displays\ this\ image\ in\ a\ separate\ window.\r\n
numComments=26
