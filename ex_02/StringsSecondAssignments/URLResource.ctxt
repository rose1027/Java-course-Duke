#BlueJ class context
comment0.target=URLResource
comment0.text=\r\n\ The\ <code>URLResource</code>\ class\ opens\ a\ connection\ to\ a\ URL\ and\ allows\ access\ to\ the\ contents\r\n\ of\ the\ web\ page\ a\ line\ at\ a\ time,\ using\ the\ method\ <code>lines</code>,\ or\ a\ word\ at\ a\ time,\ using\r\n\ the\ method\ <code>words</code>.\ These\ strings\ can\ then\ be\ iterated\ over\ using\ a\ <code>for</code>\r\n\ loop.\r\n\ \r\n\ <P>\r\n\ Example\ usage\:\r\n\ \r\n\ <PRE>\r\n\ URLResource\ ur\ \=\ new\ URLResource("http\://www.dukelearntoprogram.com/");\r\n\ for\ (String\ s\ \:\ ur.lines())\ {\r\n\ \ \ \ \ //\ print\ or\ process\ s\r\n\ }\r\n\ </PRE>\r\n\r\n\ <P>\r\n\ If\ each\ line\ of\ the\ web\ page\ represents\ separated\ data\ values,\ because\ its\ a\ CSV\ file,\ then\ the\r\n\ user\ can\ get\ a\ <code>getCSVParser</code>\ object\ to\ access\ that\ data\ more\ directly,\ using\ one\ of\ the\r\n\ <code>getCSVParser</code>\ methods.\r\n\ \r\n\ <P>\r\n\ Example\ CSV\ usage\:\r\n\ \r\n\ <PRE>\r\n\ URLResource\ ur\ \=\ new\ URLResource("http\://www.dukelearntoprogram.com/course2/java/food.csv");\r\n\ for\ (CSVRecord\ record\ \:\ ur.getCSVParser())\ {\r\n\ \ \ \ \ //\ print\ or\ process\ fields\ in\ record\r\n\ \ \ \ \ String\ name\ \=\ record.get("Name");\r\n\ \ \ \ \ //\ other\ processing\r\n\ }\r\n\ </PRE>\r\n\ \r\n\ <P>\r\n\ This\ software\ is\ licensed\ with\ an\ Apache\ 2\ license,\ see\r\n\ http\://www.apache.org/licenses/LICENSE-2.0\ for\ details.\r\n\ \r\n\ @author\ Duke\ Software\ Team\r\n
comment1.params=name
comment1.target=URLResource(java.lang.String)
comment1.text=\r\n\ Create\ a\ <code>URLResource</code>\ object\ bound\ to\ the\ web\ page\ whose\ URL\ is\ given\ as\ the\r\n\ parameter.\r\n\ \r\n\ Constructing\ the\ object\ opens\ a\ connection\ and\ reads\ the\ contents\ of\ the\ web\ page.\r\n\ \r\n\ @param\ name\ is\ the\ name\ of\ the\ URL,\ it\ must\ start\ with\ "http"\ or\ "https"\r\n\ @throws\ exception\ if\ the\ URL\ does\ not\ start\ with\ "http"\ or\ "https"\r\n
comment2.params=
comment2.target=java.lang.Iterable\ lines()
comment2.text=\r\n\ Allow\ access\ to\ open\ web\ page\ one\ line\ at\ a\ time.\r\n\ \r\n\ @return\ an\ <code>Iterable</code>\ that\ allows\ access\ one\ line\ at\ a\ time\r\n
comment3.params=
comment3.target=java.lang.Iterable\ words()
comment3.text=\r\n\ Allow\ access\ to\ this\ open\ web\ page\ one\ word\ at\ a\ time,\ where\ words\ are\ separated\ by\r\n\ white-space.\ This\ means\ any\ form\ of\ spaces,\ like\ tabs\ or\ newlines,\ can\ delimit\ words.\r\n\ \r\n\ @return\ an\ <code>Iterable</code>\ that\ allows\ access\ one\ word\ at\ a\ time\r\n
comment4.params=
comment4.target=java.lang.String\ asString()
comment4.text=\r\n\ Return\ entire\ open\ web\ page\ as\ one\ string.\r\n\ \r\n\ @return\ a\ <code>String</code>\ that\ is\ the\ contents\ of\ the\ open\ web\ page\r\n
comment5.params=
comment5.target=org.apache.commons.csv.CSVParser\ getCSVParser()
comment5.text=\r\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ web\ page.\r\n\ \r\n\ Each\ line\ of\ the\ web\ page\ should\ be\ formatted\ as\ data\ separated\ by\ commas\ and\ with\ a\ header\r\n\ row\ to\ describe\ the\ column\ names.\r\n\ \r\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ web\ page\ one\r\n\ \ \ \ \ \ \ \ \ at\ a\ time\r\n\ @throws\ exception\ if\ this\ web\ page\ does\ not\ represent\ a\ CSV\ formatted\ data\r\n
comment6.params=withHeader
comment6.target=org.apache.commons.csv.CSVParser\ getCSVParser(boolean)
comment6.text=\r\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ web\ page,\ possibly\r\n\ without\ a\ header\ row.\r\n\ \r\n\ Each\ line\ of\ the\ web\ page\ should\ be\ formatted\ as\ data\ separated\ by\ commas\ and\ with/without\ a\r\n\ header\ row\ to\ describe\ the\ column\ names.\r\n\ \r\n\ @param\ withHeader\ uses\ first\ row\ of\ data\ as\ a\ header\ row\ only\ if\ true\r\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ web\ page\ one\r\n\ \ \ \ \ \ \ \ \ at\ a\ time\r\n\ @throws\ exception\ if\ this\ web\ page\ does\ not\ represent\ a\ CSV\ formatted\ data\r\n
comment7.params=withHeader\ delimiter
comment7.target=org.apache.commons.csv.CSVParser\ getCSVParser(boolean,\ java.lang.String)
comment7.text=\r\n\ Returns\ a\ <code>CSVParser</code>\ object\ to\ access\ the\ contents\ of\ an\ open\ web\ page,\ possibly\r\n\ without\ a\ header\ row\ and\ a\ different\ data\ delimiter\ than\ a\ comma.\r\n\ \r\n\ Each\ line\ of\ the\ web\ page\ should\ be\ formatted\ as\ data\ separated\ by\ the\ delimiter\ passed\ as\ a\r\n\ parameter\ and\ with/without\ a\ header\ row\ to\ describe\ the\ column\ names.\ This\ is\ useful\ if\ the\r\n\ data\ is\ separated\ by\ some\ character\ other\ than\ a\ comma.\r\n\ \r\n\ @param\ withHeader\ uses\ first\ row\ of\ data\ as\ a\ header\ row\ only\ if\ true\r\n\ @param\ delimiter\ a\ single\ character\ that\ separates\ one\ field\ of\ data\ from\ another\r\n\ @return\ a\ <code>CSVParser</code>\ that\ can\ provide\ access\ to\ the\ records\ in\ the\ web\ page\ one\r\n\ \ \ \ \ \ \ \ \ at\ a\ time\r\n\ @throws\ exception\ if\ this\ web\ page\ does\ not\ represent\ a\ CSV\ formatted\ data\r\n\ @throws\ exception\ if\ <code>delimiter.length()\ \!\=\ 1</code>\r\n
comment8.params=parser
comment8.target=java.lang.Iterable\ getCSVHeaders(org.apache.commons.csv.CSVParser)
comment8.text=\r\n\ Allows\ access\ to\ the\ column\ names\ of\ the\ header\ row\ of\ a\ CSV\ file\ (the\ first\ line\ in\ the\r\n\ file)\ one\ at\ a\ time.\ If\ the\ CSV\ file\ did\ not\ have\ a\ header\ row,\ then\ an\ empty\r\n\ <code>Iterator</code>\ is\ returned.\r\n\ \r\n\ @param\ parser\ the\ <code>CSVParser</code>\ that\ has\ been\ created\ for\ this\ web\ page\r\n\ @return\ an\ <code>Iterable</code>\ that\ allows\ access\ one\ header\ name\ at\ a\ time\r\n
comment9.params=stream
comment9.target=java.lang.String\ initFromStream(java.io.InputStream)
numComments=10
